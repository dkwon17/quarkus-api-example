schemaVersion: 2.1.0
metadata:
  generateName: quarkus-api-example-demo
attributes:
  controller.devfile.io/storage-type: ephemeral
  controller.devfile.io/scc: container-build
components:
  - name: tools
    container:
      image: quay.io/devfile/universal-developer-image:ubi8-latest
      env:
        - name: QUARKUS_HTTP_HOST
          value: 0.0.0.0
      endpoints:
        - exposure: none
          name: debug
          protocol: http
          targetPort: 5005
        - exposure: none
          name: test1
          protocol: http
          targetPort: 8081
        - exposure: none
          name: test2
          protocol: tcp
          targetPort: 1593
        - exposure: public
          name: list-all-food
          protocol: http
          targetPort: 8080
          # path: /food
      memoryLimit: 6G
      cpuLimit: 1500m

  - name: postgresql
    container:
      image: 'quay.io/centos7/postgresql-13-centos7@sha256:994f5c622e2913bda1c4a7fa3b0c7e7f75e7caa3ac66ff1ed70ccfe65c40dd75'
      env:
        - name: POSTGRESQL_USER
          value: user
        - name: POSTGRESQL_PASSWORD
          value: password
        - name: POSTGRESQL_DATABASE
          value: food_db
        - name: PGDATA
          value: /tmp/pgdata

commands:
  - id: package
    exec:
      label: "1. Package"
      component: tools
      commandLine: "./mvnw clean package -DskipTests=true -Dquarkus.profile=staging"
      group:
        kind: build
        isDefault: true

  - id: startdev
    exec:
      label: "2. Start Development mode (Hot reload + debug)"
      component: tools
      commandLine: "./mvnw compile quarkus:dev"
      group:
        kind: run
        isDefault: true

  - id: buildimage
    exec:
      label: "3. Build Image"
      component: tools
      commandLine: |
        # IMAGE=image-registry.openshift-image-registry.svc:5000/$(kubectl get sa default -o json | jq -r '.metadata.namespace')/quarkus-api-example
        IMAGE=image-registry.openshift-image-registry.svc:5000/openshift/quarkus-api-example
        podman build -f src/main/docker/Dockerfile.jvm -t "${IMAGE}" .
      group:
        kind: build

  - id: pushimage
    exec:
      label: "4. Push Image"
      component: tools
      commandLine: |
        # Requires `oc policy add-role-to-user registry-editor <user_name> -n openshift`
        # IMAGE=image-registry.openshift-image-registry.svc:5000/$(kubectl get sa default -o json | jq -r '.metadata.namespace')/quarkus-api-example
        IMAGE=image-registry.openshift-image-registry.svc:5000/openshift/quarkus-api-example
        podman login --tls-verify=false -u $(oc whoami) -p $(oc whoami -t) image-registry.openshift-image-registry.svc:5000
        podman push --tls-verify=false "${IMAGE}"
      group:
        kind: build

  - id: apply
    exec:
      label: "5. Deploy application"
      component: tools
      commandLine: oc apply -f template/app.yaml
      group:
        kind: run
